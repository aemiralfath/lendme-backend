// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	body "final-project-backend/internal/auth/delivery/body"

	mock "github.com/stretchr/testify/mock"

	models "final-project-backend/internal/models"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// GetUserDetails provides a mock function with given fields: ctx, userID
func (_m *UseCase) GetUserDetails(ctx context.Context, userID string) (*models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, _a1
func (_m *UseCase) Login(ctx context.Context, _a1 body.LoginRequest) (*models.UserWithToken, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *models.UserWithToken
	if rf, ok := ret.Get(0).(func(context.Context, body.LoginRequest) *models.UserWithToken); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserWithToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, body.LoginRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, _a1
func (_m *UseCase) Register(ctx context.Context, _a1 body.RegisterRequest) (*models.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, body.RegisterRequest) *models.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, body.RegisterRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
