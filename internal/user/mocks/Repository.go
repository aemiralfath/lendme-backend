// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "final-project-backend/internal/models"

	mock "github.com/stretchr/testify/mock"

	utils "final-project-backend/pkg/utils"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckEmailExist provides a mock function with given fields: ctx, email
func (_m *Repository) CheckEmailExist(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLending provides a mock function with given fields: ctx, lending
func (_m *Repository) CreateLending(ctx context.Context, lending *models.Lending) (*models.Lending, error) {
	ret := _m.Called(ctx, lending)

	var r0 *models.Lending
	if rf, ok := ret.Get(0).(func(context.Context, *models.Lending) *models.Lending); ok {
		r0 = rf(ctx, lending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Lending) error); ok {
		r1 = rf(ctx, lending)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePayment provides a mock function with given fields: ctx, payment
func (_m *Repository) CreatePayment(ctx context.Context, payment *models.Payment) (*models.Payment, error) {
	ret := _m.Called(ctx, payment)

	var r0 *models.Payment
	if rf, ok := ret.Get(0).(func(context.Context, *models.Payment) *models.Payment); ok {
		r0 = rf(ctx, payment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Payment) error); ok {
		r1 = rf(ctx, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoucher provides a mock function with given fields: ctx, voucher
func (_m *Repository) DeleteVoucher(ctx context.Context, voucher *models.Voucher) error {
	ret := _m.Called(ctx, voucher)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Voucher) error); ok {
		r0 = rf(ctx, voucher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDebtorDetailsByID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetDebtorDetailsByID(ctx context.Context, userID string) (*models.Debtor, error) {
	ret := _m.Called(ctx, userID)

	var r0 *models.Debtor
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Debtor); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Debtor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallmentByID provides a mock function with given fields: ctx, installmentID
func (_m *Repository) GetInstallmentByID(ctx context.Context, installmentID string) (*models.Installment, error) {
	ret := _m.Called(ctx, installmentID)

	var r0 *models.Installment
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Installment); ok {
		r0 = rf(ctx, installmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Installment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, installmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanByID provides a mock function with given fields: ctx, lendingID
func (_m *Repository) GetLoanByID(ctx context.Context, lendingID string) (*models.Lending, error) {
	ret := _m.Called(ctx, lendingID)

	var r0 *models.Lending
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Lending); ok {
		r0 = rf(ctx, lendingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lendingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanPeriodByID provides a mock function with given fields: ctx, periodID
func (_m *Repository) GetLoanPeriodByID(ctx context.Context, periodID int) (*models.LoanPeriod, error) {
	ret := _m.Called(ctx, periodID)

	var r0 *models.LoanPeriod
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.LoanPeriod); ok {
		r0 = rf(ctx, periodID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoanPeriod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, periodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoans provides a mock function with given fields: ctx, debtorID, name, status, pagination
func (_m *Repository) GetLoans(ctx context.Context, debtorID string, name string, status []int, pagination *utils.Pagination) (*utils.Pagination, error) {
	ret := _m.Called(ctx, debtorID, name, status, pagination)

	var r0 *utils.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []int, *utils.Pagination) *utils.Pagination); ok {
		r0 = rf(ctx, debtorID, name, status, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []int, *utils.Pagination) error); ok {
		r1 = rf(ctx, debtorID, name, status, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayments provides a mock function with given fields: ctx, debtorID, name, pagination
func (_m *Repository) GetPayments(ctx context.Context, debtorID string, name string, pagination *utils.Pagination) (*utils.Pagination, error) {
	ret := _m.Called(ctx, debtorID, name, pagination)

	var r0 *utils.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *utils.Pagination) *utils.Pagination); ok {
		r0 = rf(ctx, debtorID, name, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *utils.Pagination) error); ok {
		r1 = rf(ctx, debtorID, name, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetailsByID provides a mock function with given fields: ctx, userId
func (_m *Repository) GetUserDetailsByID(ctx context.Context, userId string) (*models.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherByID provides a mock function with given fields: ctx, voucherID
func (_m *Repository) GetVoucherByID(ctx context.Context, voucherID string) (*models.Voucher, error) {
	ret := _m.Called(ctx, voucherID)

	var r0 *models.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Voucher); ok {
		r0 = rf(ctx, voucherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVouchers provides a mock function with given fields: ctx, name, pagination
func (_m *Repository) GetVouchers(ctx context.Context, name string, pagination *utils.Pagination) (*utils.Pagination, error) {
	ret := _m.Called(ctx, name, pagination)

	var r0 *utils.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, *utils.Pagination) *utils.Pagination); ok {
		r0 = rf(ctx, name, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *utils.Pagination) error); ok {
		r1 = rf(ctx, name, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDebtorByID provides a mock function with given fields: ctx, debtor
func (_m *Repository) UpdateDebtorByID(ctx context.Context, debtor *models.Debtor) (*models.Debtor, error) {
	ret := _m.Called(ctx, debtor)

	var r0 *models.Debtor
	if rf, ok := ret.Get(0).(func(context.Context, *models.Debtor) *models.Debtor); ok {
		r0 = rf(ctx, debtor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Debtor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Debtor) error); ok {
		r1 = rf(ctx, debtor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstallment provides a mock function with given fields: ctx, installment
func (_m *Repository) UpdateInstallment(ctx context.Context, installment *models.Installment) (*models.Installment, error) {
	ret := _m.Called(ctx, installment)

	var r0 *models.Installment
	if rf, ok := ret.Get(0).(func(context.Context, *models.Installment) *models.Installment); ok {
		r0 = rf(ctx, installment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Installment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Installment) error); ok {
		r1 = rf(ctx, installment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLending provides a mock function with given fields: ctx, lending
func (_m *Repository) UpdateLending(ctx context.Context, lending *models.Lending) (*models.Lending, error) {
	ret := _m.Called(ctx, lending)

	var r0 *models.Lending
	if rf, ok := ret.Get(0).(func(context.Context, *models.Lending) *models.Lending); ok {
		r0 = rf(ctx, lending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Lending) error); ok {
		r1 = rf(ctx, lending)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, _a1
func (_m *Repository) UpdateUser(ctx context.Context, _a1 *models.User) (*models.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoucher provides a mock function with given fields: ctx, voucher
func (_m *Repository) UpdateVoucher(ctx context.Context, voucher *models.Voucher) error {
	ret := _m.Called(ctx, voucher)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Voucher) error); ok {
		r0 = rf(ctx, voucher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
