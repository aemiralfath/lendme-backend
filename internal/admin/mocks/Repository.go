// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "final-project-backend/internal/models"

	mock "github.com/stretchr/testify/mock"

	utils "final-project-backend/pkg/utils"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateInstallments provides a mock function with given fields: ctx, lendingID, installments
func (_m *Repository) CreateInstallments(ctx context.Context, lendingID string, installments []*models.Installment) (*models.Lending, error) {
	ret := _m.Called(ctx, lendingID, installments)

	var r0 *models.Lending
	if rf, ok := ret.Get(0).(func(context.Context, string, []*models.Installment) *models.Lending); ok {
		r0 = rf(ctx, lendingID, installments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []*models.Installment) error); ok {
		r1 = rf(ctx, lendingID, installments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoucher provides a mock function with given fields: ctx, voucher
func (_m *Repository) CreateVoucher(ctx context.Context, voucher *models.Voucher) (*models.Voucher, error) {
	ret := _m.Called(ctx, voucher)

	var r0 *models.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, *models.Voucher) *models.Voucher); ok {
		r0 = rf(ctx, voucher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Voucher) error); ok {
		r1 = rf(ctx, voucher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoucher provides a mock function with given fields: ctx, voucher
func (_m *Repository) DeleteVoucher(ctx context.Context, voucher *models.Voucher) error {
	ret := _m.Called(ctx, voucher)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Voucher) error); ok {
		r0 = rf(ctx, voucher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContractStatusByID provides a mock function with given fields: ctx, contractID
func (_m *Repository) GetContractStatusByID(ctx context.Context, contractID int) (*models.ContractTrackingType, error) {
	ret := _m.Called(ctx, contractID)

	var r0 *models.ContractTrackingType
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.ContractTrackingType); ok {
		r0 = rf(ctx, contractID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ContractTrackingType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, contractID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCreditHealthByID provides a mock function with given fields: ctx, healthID
func (_m *Repository) GetCreditHealthByID(ctx context.Context, healthID int) (*models.CreditHealthType, error) {
	ret := _m.Called(ctx, healthID)

	var r0 *models.CreditHealthType
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.CreditHealthType); ok {
		r0 = rf(ctx, healthID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreditHealthType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, healthID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDebtorByID provides a mock function with given fields: ctx, debtorID
func (_m *Repository) GetDebtorByID(ctx context.Context, debtorID string) (*models.Debtor, error) {
	ret := _m.Called(ctx, debtorID)

	var r0 *models.Debtor
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Debtor); ok {
		r0 = rf(ctx, debtorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Debtor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, debtorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDebtors provides a mock function with given fields: ctx, name, pagination
func (_m *Repository) GetDebtors(ctx context.Context, name string, pagination *utils.Pagination) (*utils.Pagination, error) {
	ret := _m.Called(ctx, name, pagination)

	var r0 *utils.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, *utils.Pagination) *utils.Pagination); ok {
		r0 = rf(ctx, name, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *utils.Pagination) error); ok {
		r1 = rf(ctx, name, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallmentByID provides a mock function with given fields: ctx, installmentID
func (_m *Repository) GetInstallmentByID(ctx context.Context, installmentID string) (*models.Installment, error) {
	ret := _m.Called(ctx, installmentID)

	var r0 *models.Installment
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Installment); ok {
		r0 = rf(ctx, installmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Installment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, installmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLendingAction provides a mock function with given fields: ctx
func (_m *Repository) GetLendingAction(ctx context.Context) ([]*models.Lending, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Lending
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Lending); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Lending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLendingAmount provides a mock function with given fields: ctx
func (_m *Repository) GetLendingAmount(ctx context.Context) (float64, error) {
	ret := _m.Called(ctx)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLendingByID provides a mock function with given fields: ctx, lendingID
func (_m *Repository) GetLendingByID(ctx context.Context, lendingID string) (*models.Lending, error) {
	ret := _m.Called(ctx, lendingID)

	var r0 *models.Lending
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Lending); ok {
		r0 = rf(ctx, lendingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lendingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLendingTotal provides a mock function with given fields: ctx
func (_m *Repository) GetLendingTotal(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLendingWithInstallmentByID provides a mock function with given fields: ctx, lendingID
func (_m *Repository) GetLendingWithInstallmentByID(ctx context.Context, lendingID string) (*models.Lending, error) {
	ret := _m.Called(ctx, lendingID)

	var r0 *models.Lending
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Lending); ok {
		r0 = rf(ctx, lendingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lendingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanByID provides a mock function with given fields: ctx, lendingID
func (_m *Repository) GetLoanByID(ctx context.Context, lendingID string) (*models.Lending, error) {
	ret := _m.Called(ctx, lendingID)

	var r0 *models.Lending
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Lending); ok {
		r0 = rf(ctx, lendingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lendingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoans provides a mock function with given fields: ctx, name, status, pagination
func (_m *Repository) GetLoans(ctx context.Context, name string, status []int, pagination *utils.Pagination) (*utils.Pagination, error) {
	ret := _m.Called(ctx, name, status, pagination)

	var r0 *utils.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, []int, *utils.Pagination) *utils.Pagination); ok {
		r0 = rf(ctx, name, status, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []int, *utils.Pagination) error); ok {
		r1 = rf(ctx, name, status, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayments provides a mock function with given fields: ctx, name, pagination
func (_m *Repository) GetPayments(ctx context.Context, name string, pagination *utils.Pagination) (*utils.Pagination, error) {
	ret := _m.Called(ctx, name, pagination)

	var r0 *utils.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, *utils.Pagination) *utils.Pagination); ok {
		r0 = rf(ctx, name, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *utils.Pagination) error); ok {
		r1 = rf(ctx, name, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReturnAmount provides a mock function with given fields: ctx
func (_m *Repository) GetReturnAmount(ctx context.Context) (float64, error) {
	ret := _m.Called(ctx)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAction provides a mock function with given fields: ctx
func (_m *Repository) GetUserAction(ctx context.Context) ([]*models.Debtor, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Debtor
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Debtor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Debtor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTotal provides a mock function with given fields: ctx
func (_m *Repository) GetUserTotal(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucherByID provides a mock function with given fields: ctx, voucherID
func (_m *Repository) GetVoucherByID(ctx context.Context, voucherID string) (*models.Voucher, error) {
	ret := _m.Called(ctx, voucherID)

	var r0 *models.Voucher
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Voucher); ok {
		r0 = rf(ctx, voucherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVouchers provides a mock function with given fields: ctx, name, pagination
func (_m *Repository) GetVouchers(ctx context.Context, name string, pagination *utils.Pagination) (*utils.Pagination, error) {
	ret := _m.Called(ctx, name, pagination)

	var r0 *utils.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, *utils.Pagination) *utils.Pagination); ok {
		r0 = rf(ctx, name, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *utils.Pagination) error); ok {
		r1 = rf(ctx, name, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDebtorByID provides a mock function with given fields: ctx, debtor
func (_m *Repository) UpdateDebtorByID(ctx context.Context, debtor *models.Debtor) (*models.Debtor, error) {
	ret := _m.Called(ctx, debtor)

	var r0 *models.Debtor
	if rf, ok := ret.Get(0).(func(context.Context, *models.Debtor) *models.Debtor); ok {
		r0 = rf(ctx, debtor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Debtor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Debtor) error); ok {
		r1 = rf(ctx, debtor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstallmentByID provides a mock function with given fields: ctx, installment
func (_m *Repository) UpdateInstallmentByID(ctx context.Context, installment *models.Installment) (*models.Installment, error) {
	ret := _m.Called(ctx, installment)

	var r0 *models.Installment
	if rf, ok := ret.Get(0).(func(context.Context, *models.Installment) *models.Installment); ok {
		r0 = rf(ctx, installment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Installment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Installment) error); ok {
		r1 = rf(ctx, installment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLendingByID provides a mock function with given fields: ctx, lending
func (_m *Repository) UpdateLendingByID(ctx context.Context, lending *models.Lending) (*models.Lending, error) {
	ret := _m.Called(ctx, lending)

	var r0 *models.Lending
	if rf, ok := ret.Get(0).(func(context.Context, *models.Lending) *models.Lending); ok {
		r0 = rf(ctx, lending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Lending)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Lending) error); ok {
		r1 = rf(ctx, lending)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoucherByID provides a mock function with given fields: ctx, voucher
func (_m *Repository) UpdateVoucherByID(ctx context.Context, voucher *models.Voucher) error {
	ret := _m.Called(ctx, voucher)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Voucher) error); ok {
		r0 = rf(ctx, voucher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
